-- ELLIS_ISLAND server (via DBeaverEE)
--  public.user
select now() at time zone 'utc', count(*) as num_rows,  count(distinct(UUID)) as u_ids min(inserted_at), max(inserted_at) FROM public."user";
-- EXCELLENT num_rows: 2_907_363
-- EXCELLENT user_ids: 2_907_363
-- EXCELLENT date range 2020-04-30 to TODAY
-- BAD lacks segment anonymous_id


-- SNOWFLAKE server
--   STITCH_LANDING.ELLIS_ISLAND.USER
SELECT CURRENT_TIMESTAMP(), count(*) as num_rows, count(distinct(UUID)) as uuids from "STITCH_LANDING"."ELLIS_ISLAND"."USER";
-- EXCELLENT num_rows: 2_907_284
-- EXCELLENT user_ids: 2_907_284
-- EXCELLENT date range 2020-04-30 to today
-- BAD lacks segment.anonymous_id


-- SNOWFLAKE server
--   SEGMENT.ELLIS_ISLAND.ACCOUNT_CREATED 
--      ID: personas_20TACLql7n4lU2MhzcgiaSfj3uG
--      ANONYMOUS_ID: 4d68aee7-929a-45cf-b314-1a94436ad006
select CURRENT_TIMESTAMP(), count(*) as num_rows, count(distinct(user_id)) as u_ids from "SEGMENT"."ELLIS_ISLAND"."ACCOUNT_CREATED";
-- BAD num_rows: 273722 TOO LOW
-- BAD user_id: 273693 TOO LOW
-- BAD date range 2022-03-17 to today is too short
-- OK has ellis_island.user_id
-- BAD lacks segment.anonymous_id


-- SNOWFLAKE server
--   SEGMENT.PERSONAS_THE_CHOSEN_WEB.IDENTIFIES
select min(timestamp), max(timestamp), count(*) as num_rows, count(distinct(anonymous_id)) as a_ids,  count(distinct(user_id)) as u_ids from  "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES";
-- GOOD num_rows: 7_556_310 
-- GOOD user_ids: 6_193_042
-- BAD anon_ids: 24994 TOO LOW
-- FAIR date range: 2021-11-04 to TODAY
-- GOOD has anonymous_id
-- GOOD has user_id

-- SNOWFLAKE server
--   SEGMENT.PERSONAS_THE_CHOSEN_WEB.USERS
--      IDENTIFIES.anonymous_id d580cef6-1227-49bb-8bab-5f6fee7f6c58
--      USERS.id                d580cef6-1227-49bb-8bab-5f6fee7f6c58
select min(received_at), max(received_at), count(*) as num_rows, count(distinct(id)) as a_ids  from  "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."USERS";
-- GOOD num_rows: 6_255_987 
-- GOOD anon_ids: 6_255_987
-- BAD no user_ids
-- FAIR date range: 2021-11-04 to TODAY
-- EXCELLENT IDENTIFIES.anonymous_id == USERS.id 

-- SNOWFLAKE server
--   SEGMENT.PERSONAS_THE_CHOSEN_WEB.TRACKS
select min(received_at), max(received_at), count(*) as num_rows, count(distinct(user_id)) as u_ids, count(distinct(anonymous_id)) as a_ids  from  "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."TRACKS";
-- GOOD num_rows: 7_132_156 
-- GOOD user_ids: 6_138_516 
-- BAD anon_ids: 317
-- BAD date range: 2022-04-27 to TODAY



select count(distinct(user_id)) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES"; -- 6220427
select count(distinct(uuid)) from "STITCH_LANDING"."ELLIS_ISLAND"."USER"; --              2916424

 
-- Q: How many distinct user_ids in IDENTIFIES do not match an Ellis Island UUID?
SELECT count(distinct(user_id))
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON user_id = uuid
where user_id is not NULL and uuid is NULL; 
-- A: 5321719 = select 100 * 5321719 / 6220427; = 85.5%

-- Q: How many distinct user_ids in IDENTIFIES do match an Ellis Island UUID?
SELECT count(distinct(user_id))
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON user_id = uuid
where  user_id is not NULL and uuid is not NULL; 
-- A: 902029 = select 100 * 902029 / 6220427; = 14.5%

-- Q: How many IDENTIFIES records?
SELECT count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES"; 
-- A: 7651633

-- Q: How many IDENTIFIES records have user_ids that have no matching UUID
SELECT count(*)
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES"
left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON user_id = uuid
where user_id is not NULL and uuid is NULL; 
-- A: select 5954968 / 7651633; = 77.8%

-- Q: How many IDENTIFIES records have user_ids that have a matching UUID
SELECT count(*)
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES"
left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON user_id = uuid
where user_id is not NULL and uuid is not NULL; 
-- A: select 1696665 / 7651633; = 22.2%

select 1696665 + 5954968 = 7651633


-- HOW many unique anonymous_ids among IDENTIFIES records with null user_id
SELECT  count(distinct(anonymous_id)) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is NULL;
-- 349

-- HOW many IDENTIFIES records have non-null user_id
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is not NULL;
-- 7651633

-- HOW many IDENTIFIES records have null user_id
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is NULL;
-- 487

-- HOW many IDENTIFIES records have null user_id and null anonymous_id
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is NULL and anonymous_id is not NULL;
-- 483

-- HOW many distinct non-null anonymous_ids among all IDENTIFIES records
SELECT  count(distinct(anonymous_id)) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where anonymous_id is not NULL;
-- 25025

-- HOW many distinct non-null user_ids among all IDENTIFIES records
SELECT  count(distinct(user_id)) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is not NULL;
-- 6221420

-- HOW many distinct user_ids among all IDENTIFIES records have a non-null anonymous_id
SELECT  count(distinct(user_id)) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 21560

-- HOW many distinct user_ids among all IDENTIFIES records have a null anonymous_id
SELECT  count(distinct(user_id)) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is not NULL and anonymous_id is NULL;
-- 6218458

--------------------
-- HOW many "IDENTIFIES" records have non null user_id and non-nuil anonymous_id?

SELECT  count(distinct(user_id)) FROM "SEGMENT"."THE_CHOSEN_MOBILE_IOS_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 1367155

SELECT  count(distinct(user_id)) FROM "SEGMENT"."THE_CHOSEN_MOBILE_ANDROID_PROD"."IDENTIFIES"  where user_id is not NULL and anonymous_id is not NULL;
-- 1133639

SELECT  count(distinct(user_id)) FROM "SEGMENT"."THE_CHOSEN_APP_REACT_NATIVE_PROD"."IDENTIFIES"   where user_id is not NULL and anonymous_id is not NULL;
-- 3542847

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."SHOPIFY"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 263168

SELECT  count(distinct(user_id)) FROM   "SEGMENT"."THE_CHOSEN_APP_WEB_PROD"."IDENTIFIES"    where user_id is not NULL and anonymous_id is not NULL;
-- 313357

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 21560

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."PERSONAS_THE_CHOSEN_MOBILE"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 111571


SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_WEB"."IDENTIFIES"   where user_id is not NULL and anonymous_id is not NULL;
-- 48619

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_TV_TVOS_DEV"."IDENTIFIES"  where user_id is not NULL and anonymous_id is not NULL;
-- 1

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_TV_ANDROIDTV_PROD"."IDENTIFIES"  where user_id is not NULL and anonymous_id is not NULL;
-- 8

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_NFT_WEBSITE_PROD"."IDENTIFIES"  where user_id is not NULL and anonymous_id is not NULL;
-- 8427

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_MOBILE_RN_IOS_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 2

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_MOBILE_RN_ANDROID_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 1

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_MOBILE_REACT_NATIVE_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 6

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_MOBILE_IOS_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 65962

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_MOBILE_ANDROID_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 38559

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_FUNDING_PROD"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 160927

SELECT  count(distinct(user_id)) FROM  "SEGMENT"."ANGEL_APP_IOS"."IDENTIFIES" where user_id is not NULL and anonymous_id is not NULL;
-- 11













--------------------


-- HOW many IDENTIFIES records have a null anonymous_id
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where anonymous_id is NULL;
-- 7609269

-- HOW many IDENTIFIES records have a non-null anonymous_id
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where anonymous_id is not NULL;
-- 30397

-- HOW many IDENTIFIES records in total
SELECT  count(*) FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES";
-- 7639666

-- SUMMARY of SEGMENT.PERSONAS_THE_CHOSEN_WEB.IDENTIFIES records:
-- current_timestamp() 2022-07-05 17:11:08.972 +0000
-- total records                                                7_652_120 
-- total with null user_ids                                           487
-- total with non-null anonymous_ids                               30_401
-- total with null anonymous_ids                                7_621_719
-- total with non-null user_ids and non-null anonymous_ids         29_914
-- total with non-null user_ids and null anonymous_ids          7_621_719
-- total with null user_ids and null anonymous_ids                      0

-- total number of distinct user_ids                              6220427
-- total number of distinct UUIDs                                 2916424
-- total number of distinct user_ids with matching UUIDs           

-- HOW many IDENTIFIES records share a user_id
-- 1 group of IDENTIFIES records shares 165 user_ids
-- 165 groups of IDENTIFIES records share 10 or more user_ids
-- 8268 groups of IDENTIFIES records share 25 or more user_ids
-- 826461 groups of IDENTIFIES records share at least 2 user_ids

-- how many IDENTIFIES records have non-null email addresses
select count(*) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where email is not null;
-- 1156752

-- how many unique non-null email addresses
select count(distinct(email)) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" where email is not null;
-- 683329

-- how many groups of IDENTIFIES records share at least 2 emails?



select user_id, count(*) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
where user_id not in ('-1','NULL')
group by user_id having count(*) > 1 
ORDER BY count(*) DESC;

with dups as (
select user_id, count(*) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
where user_id not in ('-1','NULL')
group by user_id having count(*) > 1 
ORDER BY count(*) DESC
) select count(*) from dups;

with dups as (
select user_id, count(*) from "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
where user_id not in ('-1','NULL')
group by user_id having count(*) > 10 
ORDER BY count(*) DESC
) select count(*) from dups;

-- 1 group of 165 IDENTIFIES records share the same user_id
-- 165 groups of IDENTIFIES records share 10 or more user_ids
-- 8268 groups of IDENTIFIES records share 25 or more user_ids
-- 826461 groups of IDENTIFIES records share at least 2 user_ids

-- distinct segment user_id:                                      6_220_427
-- distinct segment personas with no matching ellis_island uuid:  5_321_719 85.6%
-- distinct segment personas with matching ellis_island uuid:       898_708 14.4%



-- # segment persona.user_id matches zero ellis island user.id
SELECT 
count(distinct("SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".user_id))
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES"
left outer join 
"STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".user_id = to_varchar("STITCH_LANDING"."ELLIS_ISLAND"."USER".id)
where "STITCH_LANDING"."ELLIS_ISLAND"."USER".id is not NULL;

-- # segment persona.user_id matches 270 ellis island user.username
SELECT 
count(distinct("SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".user_id))
FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER"
ON "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".user_id = "STITCH_LANDING"."ELLIS_ISLAND"."USER".username
where 
"STITCH_LANDING"."ELLIS_ISLAND"."USER".username is not NULL; 
-- 2770

-- # ellis island user.uuid matches zero segment persona.anonymouse_id
SELECT 
count(distinct("STITCH_LANDING"."ELLIS_ISLAND"."USER".uuid))
FROM "STITCH_LANDING"."ELLIS_ISLAND"."USER"
left outer join 
"SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" 
ON 
"STITCH_LANDING"."ELLIS_ISLAND"."USER".uuid = 
"SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".anonymous_id
where "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES".anonymous_id is not NULL;
-- 0



/*
A: as of 2022-07-05 17:11:08.972 +0000 
85.6% of segment personas have user_ids that are NOT 
found among all ellis island uuids

Q. what segment persona traits can be used to find a matching ellis island uuid?

computed traits: event counters


identity graph aka persona context.externalIds?
  device level ids like iios.idfa and android.id
  device token ids like ios.push_token and android_push_token
  user-level ids like user_id
  external ids like email
  cross domain analystics IDSs like cross_domain_id
  
Personas Profile API supports finding profiles by external ids (ip_address, user_id, email, mobile_device_type, ...)

However, how to can we get external ids for all personas?

*/
-- IDEA: find all LOOKER_SOURCE SEGMENT tables or views that have columns "EMAIL" that do not contain "WEB", "PIF", "NFT", "DEV" or "STAGING"
use warehouse LOOKER_WH;
use database LOOKER_SOURCE;
use schema INFORMATION_SCHEMA;
select table_name, column_name from COLUMNS where 
column_name ilike '%mail%'
and table_name ilike '%web%'
and table_name not ilike '%app%'
and table_name not ilike '%pif%'
and table_name not ilike '%nft%'
and table_name not ilike '%dev%'
and table_name not ilike '%staging%';

-- Hello - these are all VIEWS not Tables
-- SEGMENT__ANGEL_WEB__IDENTIFIES EMAIL
-- SEGMENT__PERSONAS_THE_CHOSEN_WEB__USERS EMAIL
-- SEGMENT__ANGEL_WEB__USERS EMAIL
-- SEGMENT__PERSONAS_ANGEL_SPACE4__USERS EMAIL
-- SEGMENT__THE_CHOSEN_APP_WEB_PROD__USERS EMAIL
-- SEGMENT__ANGEL_WEB_STAGING__USERS EMAIL


select count(distinct(email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL and user_id is not NULL;
-- 679927

select count(distinct(email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL and user_id is NULL;
-- 349

select count(distinct(email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__ANGEL_WEB__USERS where email is not NULL;
-- 3

select count(distinct(email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__ANGEL_WEB__USERS where email is NULL;
-- 0

select count(distinct(CONTEXT_TRAITS_EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IP_ADDRESS_COMPUTED where CONTEXT_TRAITS_EMAIL is not NULL and user_id is not NULL;
-- 674032

select count(distinct(CONTEXT_TRAITS_EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IP_ADDRESS_COMPUTED where CONTEXT_TRAITS_EMAIL is not NULL and user_id is NULL;
-- 348

select count(distinct(CONTEXT_TRAITS_EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__TRACKS where CONTEXT_TRAITS_EMAIL is not NULL and user_id is not NULL;
-- 674032

select count(distinct(CONTEXT_TRAITS_EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__TRACKS where CONTEXT_TRAITS_EMAIL is not NULL and user_id is NULL;
-- 348
       
select count(distinct(EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__USERS where EMAIL is not NULL and IP_ADDRESS is not NULL;
-- 691768  

select count(distinct(EMAIL)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__USERS where EMAIL is not NULL and IP_ADDRESS is NULL;
-- aborted

-- GET EMAIL and USER_ID from VIEW SEGMENT__PERSONAS_THE_CHOSEN_WEB__TRACKS
select count(distinct(context_traits_email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__TRACKS where context_traits_email is not NULL and user_id is not NULL;
-- 673577

select count(distinct(context_traits_email)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__TRACKS where context_traits_email is not NULL and user_id is NULL;
-- 348

-- GET EMAIL and USER_ID from VIEW SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES
select count(distinct(context_traits_email)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES;
-- fails

select count(distinct(email)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL and user_id is not NULL and anonymous_id is not NULL;
-- 21451

select count(distinct(email)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL and user_id is not NULL;
-- 679927

select count(distinct(email)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL;
-- 679958

select count(distinct(email)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where email is not NULL and anonymous_id is not NULL;
-- 21800

select count(distinct(anonymous_id)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where user_id is not NULL and anonymous_id is not NULL;
-- 24676

select count(distinct(user_id)) from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where user_id is not NULL and anonymous_id is not NULL;
-- 21560

select count(distinct(user_id)) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES where user_id is not NULL and anonymous_id is NULL;
-- 6218458

select count(*) from LOOKER_SOURCE.PUBLIC.SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES;
-- 7639666

select 100 * 6218458 / 7639666 as percent_of_personas_without_anonymous_ids;
-- 81.39698 %

select 100 - 81.39698 as percent_of_personas_with_anonymous_ids;
-- 18.60302 %

1. find all IDENTIFIES records that share the same UUID

select current_timestamp();
-- 2022-07-05 21:24:42.614 +0000

/*      
IDEA:
Create a table of persona anonymous_ids and try to fill email_address and user_id columns

PROBLEM:
Most IDENTIFY records have NULL anonymous_ids
       
QUESTION:
Can any SEGMENT.PERSONAS_THE_CHOSEN_WEB.IDENTIFIES record have a NULL anonymous_id?
I would think this would not be possible because if an IDENTIFY event arrives and an anonymous_id cannot be found, then a new one is created.
However, I am finding that this is not the case. Most IDENTIFY records have NULL anonymous_ids. (edited) 
  
*/


/* 
question which segment tables in snowflake have anonymous_id?
*/

use warehouse LOOKER_WH;
use database SNOWFLAKE;
use schema INFORMATION_SCHEMA;
select table_name, column_name from COLUMNS where 
column_name like '%anon%';


select count(*) from "SEGMENT"."INFORMATION_SCHEMA".TABLES;
-- 1037 tables under SEGMENT

select count(*)  from "SEGMENT"."INFORMATION_SCHEMA".COLUMNS where COLUMN_NAME = 'USER_ID';
-- 844 tables under SEGMENT have USER_ID

select count(*)  from "SEGMENT"."INFORMATION_SCHEMA".COLUMNS where COLUMN_NAME = 'ANONYMOUS_ID';
-- 863 tables under SEGMENT have ANONYMOUS_ID

SELECT 
distinct(a.table_name)
FROM 
"SEGMENT"."INFORMATION_SCHEMA".COLUMNS a
join 
"SEGMENT"."INFORMATION_SCHEMA".COLUMNS b
ON a.table_name = b.table_name
where 
a.column_name = 'ANONYMOUS_ID' and b.column_name = 'USER_ID';
-- 246 tables under SEGMENT use both  both ANONYMOUS_ID and USER_ID

PROBLEMS:
1. let A = IDENTIFY records that have a non-null user_id that does not match an ELLIS_USER uuid 

with A as (
  SELECT I.user_id
  FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" I
  left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER" U
  ON I.user_id = U.uuid
  where I.user_id is not NULL and U.uuid is NULL
) select count(*) from A;
-- 5955341

-- let B = IDENTIFY records that have a non-null user_id that does not match an ELLIS_USER uuid but does have a non-null email
with B as (
  SELECT I.user_id, I.email
  FROM "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" I
  left outer join "STITCH_LANDING"."ELLIS_ISLAND"."USER" U
  ON I.user_id = U.uuid
  where I.user_id is not NULL and U.uuid is NULL and I.email is not NULL
) select count(*) from B;
-- 7559

-- let B = IDENTIFY records that have a non-null user_id 
-- that does not match an ELLIS_USER uuid but does have an ELLIS_USER
-- that has a matching email   

use DATA;

drop table if exists SCB_ELLIS_USERS;

CREATE TABLE SCB_ELLIS_USERS (
    uuid varchar(255), 
    email varchar(255)
);

INSERT INTO SCB_ELLIS_USERS (uuid, email)
select U.UUID, SA.data:email 
  from "STITCH_LANDING"."ELLIS_ISLAND".USER U, 
  "STITCH_LANDING"."ELLIS_ISLAND".SOCIAL_AUTH SA
  where SA.user_id = U.id;

drop table if exists SCB_IDENTIFIES;

create table SCB_IDENTIFIES as 
    select u.uuid, u.email, i.anonymous_id, i.user_id as old_user_id
    from SCB_ELLIS_USERS u left outer join "SEGMENT"."PERSONAS_THE_CHOSEN_WEB"."IDENTIFIES" i
    on i.email = u.email;

select count(*) from SCB_IDENTIFIES;
-- 1894598


-- IDEA: find SEGMENT IDENTIFIES tables or views that have anonymous_id, user_id, and email columns

use warehouse LOOKER_WH;
use database LOOKER_SOURCE;
use schema INFORMATION_SCHEMA;

select a.table_name, b.table_name from
columns a inner join columns b
on a.column_name = b.column_name 
where a.column_name = 'ANONYMOUS_ID' and a.table_name = 'IDENTIFIES';

)
-- 922
             
select table_name from COLUMNS where column_name = 'USER_ID';
-- 911

select table_name from COLUMNS where column_name = 'EMAIL';
-- 146



in all('EMAIL','ANONYMOUS_ID','USER_ID') and table_= 'IDENTIFIES';

create table SCB_IDENTIFIES 
with email_tables as (
  select table_name, column_name from COLUMNS where 
  column_name in all('EMAIL','ANONYMOUS_ID','USER_ID' and table_name not ilike any ('%dev%','%staging%')
),
anonymous_id_tables as ()
  select table_name, column_name from COLUMNS where 
  column_name = 'ANONYMOUS_ID'  and table_name not ilike any ('%dev%','%staging%')
),
user_id_tables as (
  select table_name, column_name from COLUMNS where 
  column_name = 'USER_ID'  and table_name not ilike any ('%dev%','%staging%')
)


-- Hello - these are all VIEWS not Tables
-- SEGMENT__ANGEL_WEB__IDENTIFIES EMAIL
-- SEGMENT__PERSONAS_THE_CHOSEN_WEB__USERS EMAIL
-- SEGMENT__ANGEL_WEB__USERS EMAIL
-- SEGMENT__PERSONAS_ANGEL_SPACE4__USERS EMAIL
-- SEGMENT__THE_CHOSEN_APP_WEB_PROD__USERS EMAIL
-- SEGMENT__ANGEL_WEB_STAGING__USERS EMAIL

use warehouse LOOKER_WH;
use database LOOKER_SOURCE;
use schema INFORMATION_SCHEMA;

-- find segment.intersect tables
select table_name from columns where  column_name in ('EMAIL') 
INTERSECT
select table_name from columns where  column_name in ('ANONYMOUS_ID') 
INTERSECT
select table_name from columns where  column_name in ('USER_ID') 
INTERSECT
select table_name from columns where table_name like '%IDENTIFIES' 
and table_name not like '%DEV%' and table_name not like '%STAG%';


drop table if exists scb_segment_identifies_triplets;
create table scb_segment_identifies_triplets (
    triplet varchar(255);
)
insert into scb_segment_identifies_triplets(triplet)
  select distinct(concat(email,anonymous_id,user_id)) from SEGMENT__ANGEL_TV_ANDROIDTV_PROD__IDENTIFIES
  UNION
  select distinct(concat(email,anonymous_id,user_id)) from SEGMENT__THE_CHOSEN_APP_WEB_PROD__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id)) from SEGMENT__THE_CHOSEN_APP_WEB_PROD__IDENTIFIES;
  
insert into scb_segment_identifies_triplets(triplet)
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__THE_CHOSEN_MOBILE_IOS_PROD__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__ANGEL_MOBILE_ANDROID_PROD__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__PERSONAS_THE_CHOSEN_WEB__IDENTIFIES;
  
insert into scb_segment_identifies_triplets(triplet)
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__ANGEL_MOBILE_IOS_PROD__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__PERSONAS_THE_CHOSEN_MOBILE__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__ANGEL_NFT_WEBSITE_PROD__IDENTIFIES;

insert into scb_segment_identifies_triplets(triplet)
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__ANGEL_WEB__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__ANGEL_APP_IOS__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__THE_CHOSEN_APP_REACT_NATIVE_PROD__IDENTIFIES;
  
insert into scb_segment_identifies_triplets(triplet)
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__SHOPIFY__IDENTIFIES
  union
  select distinct(concat(email,anonymous_id,user_id))  from SEGMENT__THE_CHOSEN_MOBILE_ANDROID_PROD__IDENTIFIES;


